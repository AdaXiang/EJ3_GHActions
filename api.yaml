openapi: 3.0.3
info:
  title: API de Contenidos
  version: 1.0.0
  description: API para la gestión de contenidos musicales de UnderSounds (álbumes y canciones)

servers:
  - url: http://localhost:8080/api
    description: Servidor local de desarrollo

paths:
  /elementos:
    get:
      summary: Obtener contenido disponible
      description: Devuelve todo el contenido disponible (álbumes y canciones) en formato JSON.
      tags: [Elementos]
      parameters:
        - name: genero
          in: query
          schema:
            type: integer
            example: 2
          description: ID del género por el que se desea filtrar.
        - name: subgenero
          in: query
          schema:
            type: integer
            example: 5
          description: ID del subgénero por el que se desea filtrar.
      responses:
        '200':
          description: Lista de contenidos obtenida correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Elemento'
        '400':
          description: Datos inválidos en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Crear un nuevo elemento
      description: Registra un nuevo elemento en la base de datos.
      tags: [Elementos]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElementoInput'
      responses:
        '201':
          description: Elemento creado correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Elemento'

  /elementos/{id}:
    get:
      summary: Obtener un contenido por ID
      tags: [Elementos]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Contenido encontrado correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Elemento'
        '404':
          description: No se encontró el contenido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /canciones:
    get:
      summary: Obtener canciones
      tags: [Canciones]
      responses:
        '200':
          description: Lista de canciones obtenida correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cancion'
    post:
      summary: Crear una nueva canción
      tags: [Canciones]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cancion'
      responses:
        '201':
          description: Canción creada correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cancion'

  /canciones/{idCancion}:
    get:
      summary: Obtener una canción por ID
      tags: [Canciones]
      parameters:
        - name: idCancion
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Canción encontrada correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cancion'
    put:
      summary: Actualizar una canción
      tags: [Canciones]
      parameters:
        - name: idCancion
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cancion'
      responses:
        '200':
          description: Canción actualizada correctamente.
    delete:
      summary: Eliminar una canción
      tags: [Canciones]
      parameters:
        - name: idCancion
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Canción eliminada correctamente.

components:
  schemas:
    Elemento:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombre:
          type: string
          example: "Álbum: Electric Dreams"
        descripcion:
          type: string
          example: "Álbum debut de la banda SynthWave"
        precio:
          type: number
          format: float
          example: 19.99
        genero:
          $ref: '#/components/schemas/Genero'
        artista:
          $ref: '#/components/schemas/Artista'
      required: [id, nombre]

    ElementoInput:
      type: object
      properties:
        nombre:
          type: string
        descripcion:
          type: string
        precio:
          type: number
        subgenero:
          type: array
          items:
            $ref: '#/components/schemas/Genero'
      required: [nombre]

    Cancion:
      allOf:
        - $ref: '#/components/schemas/Elemento'
        - type: object
          required: [idElemento, nombre]
          properties:
            idElemento:
              type: integer
              example: 3
            numRep:
              type: integer
              example: 15420

    Genero:
      type: object
      properties:
        id:
          type: integer
        nombre:
          type: string
      required: [id, nombre]

    Usuario:
      type: object
      properties:
        id:
          type: integer
        nombreUsuario:
          type: string
        correo:
          type: string
      required: [id, nombreUsuario, correo]

    Artista:
      allOf:
        - $ref: '#/components/schemas/Usuario'
        - type: object
          required: [esNovedad, oyentes, valoracion, genero]
          properties:
            esNovedad:
              type: boolean
            oyentes:
              type: integer
            valoracion:
              type: number
            genero:
              $ref: '#/components/schemas/Genero'

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        path:
          type: string
      required: [code, message]

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
