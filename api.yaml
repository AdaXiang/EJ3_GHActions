openapi: 3.0.3
info:
  title: API de Contenidos
  version: 1.0.0
  description: API para la gestión de contenidos musicales de UnderSounds (álbumes y canciones)

servers:
  - url: http://localhost:8080/api
    description: Servidor local de desarrollo

paths:
  /elementos:
    get:
      summary: Obtener contenido disponible
      description: >
        Devuelve todo el contenido disponible (álbumes y canciones) en formato JSON.  
        Permite aplicar filtros opcionales por género, subgénero, precio mínimo/máximo y fecha mínima/máxima.
      tags:
        - Elementos
      parameters:
        - name: genero
          in: query
          required: false
          schema:
            type: integer
            example: 2
          description: ID del género por el que se desea filtrar.
        - name: subgenero
          in: query
          required: false
          schema:
            type: integer
            example: 5
          description: ID del subgénero por el que se desea filtrar.
        - name: preciomin
          in: query
          required: false
          schema:
            type: number
            format: float
            example: 10.0
          description: Precio mínimo del contenido.
        - name: preciomax
          in: query
          required: false
          schema:
            type: number
            format: float
            example: 50.0
          description: Precio máximo del contenido.
        - name: fechamin
          in: query
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
          description: Fecha mínima de creación o publicación.
        - name: fechamax
          in: query
          required: false
          schema:
            type: string
            format: date
            example: "2025-01-01"
          description: Fecha máxima de creación o publicación.
      responses:
        '200':
          description: Lista de contenidos obtenida correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Elemento'
        '400':
          description: Datos inválidos en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "Faltan campos requeridos o formato incorrecto."
                path: "/v1/elementos"
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al obtener los contenidos."
                path: "/v1/elementos"

    post:
      summary: Crear un nuevo elemento
      description: Registra un nuevo elemento en la base de datos.
      tags:
        - Elementos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElementoInput'
      responses:
        '201':
          description: Elemento creado correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Elemento'
        '400':
          description: Datos de entrada inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "Faltan campos requeridos o formato incorrecto."
                path: "/v1/elementos"
        '401':
          description: Token inválido o no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: "El token JWT proporcionado no es válido o ha expirado."
                path: "/v1/elementos"
        '500':
          description: Error interno al crear el elemento.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al crear el contenido."
                path: "/v1/elementos"
          
    put:
      summary: Actualizar un contenido existente
      description: Modifica los datos de un contenido. El ID se toma del cuerpo de la petición.
      tags:
        - Elementos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Elemento'
      responses:
        '200':
          description: Contenido actualizado correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Elemento'
        '400':
          description: Datos inválidos o ID no especificado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "Los datos son inválidos."
                path: "/v1/elementos"
        '404':
          description: No se encontró un contenido con el ID indicado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró el contenido con el ID indicado."
                path: "/v1/elementos"
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al actualizar el contenido."
                path: "/v1/elementos"
  
  /elementos/{id}:
    get:
      summary: Obtener un contenido por ID
      description: Devuelve el contenido correspondiente al ID proporcionado.
      tags:
        - Elementos
      parameters:
        - name: id
          in: path
          required: true
          description: ID del contenido a consultar
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description: Contenido encontrado correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Elemento'
        '404':
          description: No se encontró un contenido con el ID indicado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró el contenido con el ID indicado."
                path: "/v1/elementos/45"
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al actualizar el contenido."
                path: "/v1/elementos/45"
          
    delete:
      summary: Eliminar un contenido por ID
      description: Borra un contenido existente del sistema.
      tags:
        - Elementos
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID del contenido que se desea eliminar
          schema:
            type: integer
            example: 5
      responses:
        '204':
          description: Contenido eliminado correctamente (sin cuerpo de respuesta).
        '401':
          description: Token inválido o usuario no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: "Token JWT inválido o expirado."
                path: "/v1/elementos/45"
        '404':
          description: No se encontró un contenido con el ID indicado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró el contenido con el ID especificado."
                path: "/v1/elementos/45"
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al intentar eliminar el contenido."
                path: "/v1/elementos/45"
  /canciones:
    get:
      summary: Obtener canciones
      description: Devuelve todas las canciones disponibles
      tags:
        - Canciones
      parameters:
        - name: idAlbum
          in: query
          required: false
          schema:
            type: integer
            example: 3
          description: ID del álbum al que pertenece la canción
        - name: nombre
          in: query
          required: false
          schema:
            type: string
            example: Forever Young
          description: Nombre de la canción
      responses:
        '200':
          description: Lista de canciones obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cancion'
        '500':
          description: Error interno del servido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al obtener las canciones."
    post: 
      summary: Crear una nueva canción
      description: Inserta un nuevo registro en la tabla de canciones.
      tags:
        - Canciones
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cancion'
      responses:
        '201':
          description: Canción creada correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cancion'
        '400':
          description: Error en los datos enviados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "Faltan campos requeridos o formato incorrecto."
        '401':
          description: Token inválido o no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: "El token JWT proporcionado no es válido o ha expirado."
        '409':
          description: Conflicto — la canción ya existe.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 409
                message: "La canción ya existe."
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al crear la canción."

  /canciones{idCancion}:
    get:
      summary: Obtener una canción por ID
      description: Devuelve la canción correspondiente al ID proporcionado.
      tags:
        - Canciones
      parameters:
        - name: idCancion
          in: path
          required: true
          description: ID de la canción a consultar
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description: Canción encontrada correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cancion'
        '404':
          description: No se encontró la canción con el ID indicado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró la canción con el ID indicado."
    put: 
      summary: Actualizar una canción por ID
      description: Modifica los datos de una canción existente.
      tags:
        - Canciones
      security:
        - bearerAuth: []
      parameters:
        - name: idCancion
          in: path
          required: true
          schema:
            type: integer
          description: ID de la canción a actualizar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cancion'
      responses:
        '200':
          description: Canción actualizada correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cancion'
        '401':
          description: Token inválido o no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: "El token JWT proporcionado ha expirado o no tiene permisos."
        '404':
          description: Canción no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró la canción asociada al ID."
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al actualizar la canción."
    delete:
      summary: Eliminar una canción por ID
      description: Borra una canción de la base de datos según su ID.
      tags:
        - Canciones
      security:
        - bearerAuth: []
      parameters:
        - name: idCancion
          in: path
          required: true
          schema:
            type: integer
          description: ID de la canción a eliminar.
      responses:
        '200':
          description: Canción eliminada correctamente.
        '401':
          description: Token inválido o usuario no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: "Token JWT inválido o expirado."
        '404':
          description: Canción no encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró la canción con el ID especificado."
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al intentar eliminar la canción."
  
  /canciones/album/{idAlbum}:
    get:
      summary: Obtener canciones de un álbum
      description: Devuelve todas las canciones que pertenecen al álbum con el ID proporcionado.
      tags:
        - Canciones album
      parameters:
        - name: idAlbum
          in: path
          required: true
          description: ID del álbum cuyas canciones se desean consultar
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description: Lista de canciones del álbum obtenida correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cancion'
        '404':
          description: No se encontró un álbum con el ID indicado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró el álbum con el ID indicado."
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al obtener las canciones del álbum."
  
  /canciones/genero/{idGenero}:
    get:
      summary: Obtener canciones por género
      description: Devuelve todas las canciones que pertenecen al género con el ID proporcionado.
      tags:
        - Canciones genero
      parameters:
        - name: idGenero
          in: path
          required: true
          description: ID del género cuyas canciones se desean consultar
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description: Lista de canciones del género obtenida correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cancion'
        '404':
          description: No se encontró un género con el ID indicado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró el género con el ID indicado."
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al obtener las canciones del género."
  
  /canciones/artista/{idArtista}:
    get:
      summary: Obtener canciones por artista
      description: Devuelve todas las canciones que pertenecen al artista con el ID proporcionado.
      tags:
        - Canciones artista
      parameters:
        - name: idArtista
          in: path
          required: true
          description: ID del artista cuyas canciones se desean consultar
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description: Lista de canciones del artista obtenida correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cancion'
        '404':
          description: No se encontró un artista con el ID indicado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró el artista con el ID indicado."
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al obtener las canciones del artista."
  /contenidos: 
    get:
      summary: Obtener contenido disponible
      description: >
        Devuelve todo el contenido disponible (álbumes, canciones y artistas) en formato, JSON.  
        Permite aplicar filtros opcionales por género, subgénero, precio mínimo/máximo y fecha mínima/máxima.
      tags:
        - Contenidos
      parameters:
        - name: genero
          in: query
          required: false
          schema:
            type: integer
            example: 2
          description: ID del género por el que se desea filtrar.
        - name: subgenero
          in: query
          required: false
          schema:
            type: integer
            example: 5
          description: ID del subgénero por el que se desea filtrar.
        - name: preciomin
          in: query
          required: false
          schema:
            type: number
            format: float
            example: 10.0
          description: Precio mínimo del contenido.
        - name: preciomax
          in: query
          required: false
          schema:
            type: number
            format: float
            example: 50.0
          description: Precio máximo del contenido.
        - name: fechamin
          in: query
          required: false
          schema:
            type: string
            format: date
            example: "2024-01-01"
          description: Fecha mínima de creación o publicación.
        - name: fechamax
          in: query
          required: false
          schema:
            type: string
            format: date
            example: "2025-01-01"
          description: Fecha máxima de creación o publicación.
      responses:
        '200':
          description: Lista de contenidos obtenida correctamente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contenido'
        '400':
          description: Datos inválidos en la solicitud.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "Faltan campos requeridos o formato incorrecto."

  /generos:
    get:
      summary: Obtener géneros
      description: Devuelve todos los géneros disponibles
      tags:
        - Generos
      parameters:
        - name: idGenero
          in: query
          required: false
          schema:
            type: integer
            example: 3
          description: ID del género
        - name: nombre
          in: query
          required: false
          schema:
            type: string
            example: Rock
          description: Nombre del género
      responses:
        '200':
          description: Lista de géneros obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genero'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al obtener los géneros."
                  
    post:
      summary: Crear un nuevo género
      description: Inserta un nuevo registro en la tabla de géneros.
      tags:
        - Generos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genero'
      responses:
        '201':
          description: Género creado correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genero'
        '400':
          description: Error en los datos enviados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 400
                message: "Faltan campos requeridos o formato incorrecto."
                path: "/v1/generos"
        '401':
          description: Token inválido o no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: "El token JWT proporcionado no es válido o ha expirado."
                path: "/v1/generos"
        '409':
          description: Conflicto — el género ya existe.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 409
                message: "El género ya existe."
                path: "/v1/generos"
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al crear el género."
                path: "/v1/generos"

  /generos/{idGenero}:
    get:
      summary: Obtener un contenido por ID
      description: Devuelve el contenido correspondiente al ID proporcionado.
      tags:
        - Generos
      parameters:
        - name: idGenero
          in: path
          required: true
          description: ID del género a consultar
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description: Contenido encontrado correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genero'
        '404':
          description: No se encontró el género con el ID indicado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró el género con el ID indicado."
                path: "/v1/generos/2"
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al consultar el género."
                path: "/v1/generos/2"
          
    put:
      summary: Actualizar un género por ID
      description: Modifica los datos de un género existente.
      tags:
        - Generos
      security:
        - bearerAuth: []
      parameters:
        - name: idGenero
          in: path
          required: true
          schema:
            type: integer
          description: ID del género a actualizar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genero'
      responses:
        '200':
          description: Género actualizado correctamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genero'
        '401':
          description: Token inválido o no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: "El token JWT proporcionado ha expirado o no tiene permisos."
                path: "/v1/generos"
        '404':
          description: Género no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró el género asociado al ID."
                path: "/v1/generos"
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al actualizar el género."
                path: "/v1/generos"

    delete:
      summary: Eliminar un género por ID
      description: Borra un género de la base de datos según su ID.
      tags:
        - Generos
      security:
        - bearerAuth: []
      parameters:
        - name: idGenero
          in: path
          required: true
          schema:
            type: integer
          description: ID del género a eliminar.
      responses:
        '200':
          description: Género eliminado correctamente.
        '401':
          description: Token inválido o usuario no autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 401
                message: "Token JWT inválido o expirado."
                path: "/v1/generos/45"
        '404':
          description: Género no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 404
                message: "No se encontró el género con el ID especificado."
                path: "/v1/generos/45"
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                code: 500
                message: "Ocurrió un error inesperado al intentar eliminar el género."
                path: "/v1/generos/45"
    
components:
  schemas:
    Elemento:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombre:
          type: string
          example: "Álbum: Electric Dreams"
        fechacrea:
          type: string
          format: date-time
          example: "2025-10-06T14:00:00Z"
        descripcion:
          type: string
          example: "Álbum debut de la banda SynthWave"
        urlFoto:
          type: string
          description: url de la foto 
          example: "amazon"
        numventas:
          type: integer
          example: 120
        valoracion:
          type: integer
          minimum: 0
          maximum: 5
          example: 4
        precio:
          type: number
          format: float
          example: 19.99
        esnovedad:
          type: boolean
          example: true
        esalbum:
          type: boolean
          example: true
        genero:
          $ref: '#/components/schemas/Genero'
        artista:
          $ref: '#/components/schemas/Artista'
      required:
        - id
        - nombre
        - idgenero

    ElementoInput:
      type: object
      properties:
        nombre:
          type: string
          example: "Electric Dreams"
        descripcion:
          type: string
          example: "Álbum debut de la banda SynthWave"
        urlFoto:
          type: string
          description: url de la foto 
          example: "amazon"
        precio:
          type: number
          format: float
          example: 19.99
        esnovedad:
          type: boolean
          example: true
        esalbum:
          type: boolean
          example: false
        genero:
          $ref: '#/components/schemas/Genero'
        subgenero:
          type: array
          items: 
          $ref: '#/components/schemas/Genero'
        artista:
          $ref: '#/components/schemas/Artista'
        tipoContenido:
          type: integer
          example: 2
      required:
        - nombre

    Cancion:
      allOf:
        - type: object
        - $ref: '#/components/schemas/Elemento'
          required:
            - idElemento
            - nombre
          properties:
            idElemento:
              type: integer
              description: Identificador único de la canción.
              example: 3
            nombre:
              type: string
              maxLength: 100
              description: Nombre de lo canción.
              example: "Forever Young"
            numRep:
              type: integer
              minimum: 0
              description: Número de reproducciones de la canción.
              example: 15420
            idAlbum:
              type: integer
              description: Identificador del álbum al que pertenece la canción (si aplica).
              example: 5
        
    Genero:
      type: object
      required:
        - id
        - nombre
      properties:
        id:
          type: integer
          description: Identificador único del género musical
          example: 3
        nombre:
          type: string
          maxLength: 100
          description: Nombre del género musical
          example: "Rock"

    Usuario:
      type: object 
      required:
        - id
        - nombreUsuario
        - nombreReal
        - contrasenia
        - correo
      properties:
        id:
          type: integer
          format: int16
          description: Identificador único del usuario
          example: 1
        nombreUsuario:
          type: string
          maxLength: 50
          description: Nombre de usuario en la web
          example: "carlos123"
        nombreReal:
          type: string
          maxLength: 100
          description: Nombre completo del usuario
          example: "Carlos Pérez"
        contrasenia:
          type: string
          format: password
          description: Contraseña encriptada del usuario
          example: "$2b$10$A1bC2dE3fG4hI5jK6lM7nO8pQ9rS0tU"
        correo:
          type: string
          format: email
          maxLength: 70
          description: Correo electrónico del usuario
          example: "carlos@example.com"
        descripcion:
          type: string
          nullable: true
          maxLength: 256
          description: Descripción o biografía del usuario
          example: "Apasionado por la música y la producción digital."
        fechaRegistro:
          type: string
          format: date-time
          description: Fecha y hora en que se registró el usuario
          example: "2025-10-14T18:45:00Z"
        rutaFoto:
          type: string
          nullable: true
          maxLength: 255
          description: URL o ruta de la imagen de perfil del usuario
          example: "https://cdn.misitio.com/usuarios/1/perfil.jpg"

    Artista:
      allOf:
        - $ref: '#/components/schemas/Usuario'
        - type: object
          required:
            - esNovedad
            - oyentes
            - valoracion
            - genero
          properties:
            esNovedad:
              type: boolean
              description: Indica si el artista es destacado o de reciente incorporación
              example: true
            oyentes:
              type: integer
              minimum: 0
              description: Cantidad total de oyentes del artista
              example: 15420
            valoracion:
              type: number
              format: float
              minimum: 0
              maximum: 5
              description: Valoración promedio del artista (de 0.0 a 5.0)
              example: 3.5
            genero:
              $ref: '#/components/schemas/Genero'
    
    Contenido:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Identificador único del contenido.
        nombre:
          type: string
          example: "Electric Dreams"
          description: Nombre del contenido.
        fechacrea:
          type: string
          format: date-time
          example: "2025-10-06T14:00:00Z"
          description: Fecha de creación del contenido.
        descripcion:
          type: string
          example: "Álbum debut de la banda SynthWave."
          description: Descripción del contenido.
        numventas:
          type: integer
          example: 120
          description: Número de ventas del contenido.
        valoracion:
          type: integer
          minimum: 0
          maximum: 5
          example: 4
          description: Valoración media del contenido.
        precio:
          type: number
          format: float
          example: 19.99
          description: Precio del contenido. Si es artista será null.
        esnovedad:
          type: boolean
          example: true
          description: Indica si el contenido es una novedad.
        genero:
          $ref: '#/components/schemas/Genero'
        fotoamazon:
          type: string
          example: "foto123.jpg"
          description: Nombre de la foto almacenada en Amazon.
        tipo:
          type: number
          example: 0
          description: Tipo de contenido (por ejemplo, Álbum, Canción o Artista).
      required:
        - id
        - nombre
        - fechacrea
        - descripcion
        - precio
        - idgenero
        - tipo

    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: Código HTTP o interno del error
          example: 400
        message:
          type: string
          description: Descripción legible del error
          example: "Solicitud inválida"
        path:
          type: string
          description: Endpoint donde ocurrió el error
          example: "/v1/usuarios"
        
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


